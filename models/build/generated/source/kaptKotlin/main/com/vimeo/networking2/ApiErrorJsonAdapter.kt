// Code generated by moshi-kotlin-codegen. Do not edit.
package com.vimeo.networking2

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import java.lang.NullPointerException
import kotlin.Boolean
import kotlin.String

class ApiErrorJsonAdapter(moshi: Moshi) : JsonAdapter<ApiError>() {
    private val options: JsonReader.Options =
            JsonReader.Options.of("developer_message", "error", "error_code", "link")

    private val nullableStringAdapter: JsonAdapter<String?> =
            moshi.adapter<String?>(String::class.java, kotlin.collections.emptySet(), "developerMessage")

    override fun toString(): String = "GeneratedJsonAdapter(ApiError)"

    override fun fromJson(reader: JsonReader): ApiError {
        var developerMessage: String? = null
        var developerMessageSet: Boolean = false
        var errorMessage: String? = null
        var errorMessageSet: Boolean = false
        var errorCode: String? = null
        var errorCodeSet: Boolean = false
        var link: String? = null
        var linkSet: Boolean = false
        reader.beginObject()
        while (reader.hasNext()) {
            when (reader.selectName(options)) {
                0 ->  {
                    developerMessage = nullableStringAdapter.fromJson(reader)
                    developerMessageSet = true
                }
                1 ->  {
                    errorMessage = nullableStringAdapter.fromJson(reader)
                    errorMessageSet = true
                }
                2 ->  {
                    errorCode = nullableStringAdapter.fromJson(reader)
                    errorCodeSet = true
                }
                3 ->  {
                    link = nullableStringAdapter.fromJson(reader)
                    linkSet = true
                }
                -1 -> {
                    // Unknown name, skip it.
                    reader.skipName()
                    reader.skipValue()
                }
            }
        }
        reader.endObject()
        var result = ApiError()
        result = result.copy(
                developerMessage = if (developerMessageSet) developerMessage else result.developerMessage,
                errorMessage = if (errorMessageSet) errorMessage else result.errorMessage,
                errorCode = if (errorCodeSet) errorCode else result.errorCode,
                link = if (linkSet) link else result.link)
        return result
    }

    override fun toJson(writer: JsonWriter, value: ApiError?) {
        if (value == null) {
            throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
        }
        writer.beginObject()
        writer.name("developer_message")
        nullableStringAdapter.toJson(writer, value.developerMessage)
        writer.name("error")
        nullableStringAdapter.toJson(writer, value.errorMessage)
        writer.name("error_code")
        nullableStringAdapter.toJson(writer, value.errorCode)
        writer.name("link")
        nullableStringAdapter.toJson(writer, value.link)
        writer.endObject()
    }
}

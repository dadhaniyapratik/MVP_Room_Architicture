// Code generated by moshi-kotlin-codegen. Do not edit.
package com.vimeo.networking2

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import java.lang.NullPointerException
import kotlin.Boolean
import kotlin.String
import kotlin.collections.List

class PictureCollectionJsonAdapter(moshi: Moshi) : JsonAdapter<PictureCollection>() {
    private val options: JsonReader.Options =
            JsonReader.Options.of("active", "link", "resource_key", "sizes", "type", "uri")

    private val nullableBooleanAdapter: JsonAdapter<Boolean?> =
            moshi.adapter<Boolean?>(Boolean::class.javaObjectType, kotlin.collections.emptySet(), "active")

    private val nullableStringAdapter: JsonAdapter<String?> =
            moshi.adapter<String?>(String::class.java, kotlin.collections.emptySet(), "link")

    private val nullableListOfPictureAdapter: JsonAdapter<List<Picture>?> =
            moshi.adapter<List<Picture>?>(Types.newParameterizedType(List::class.java, Picture::class.java), kotlin.collections.emptySet(), "sizes")

    override fun toString(): String = "GeneratedJsonAdapter(PictureCollection)"

    override fun fromJson(reader: JsonReader): PictureCollection {
        var active: Boolean? = null
        var activeSet: Boolean = false
        var link: String? = null
        var linkSet: Boolean = false
        var resourceKey: String? = null
        var resourceKeySet: Boolean = false
        var sizes: List<Picture>? = null
        var sizesSet: Boolean = false
        var rawType: String? = null
        var rawTypeSet: Boolean = false
        var uri: String? = null
        var uriSet: Boolean = false
        reader.beginObject()
        while (reader.hasNext()) {
            when (reader.selectName(options)) {
                0 ->  {
                    active = nullableBooleanAdapter.fromJson(reader)
                    activeSet = true
                }
                1 ->  {
                    link = nullableStringAdapter.fromJson(reader)
                    linkSet = true
                }
                2 ->  {
                    resourceKey = nullableStringAdapter.fromJson(reader)
                    resourceKeySet = true
                }
                3 ->  {
                    sizes = nullableListOfPictureAdapter.fromJson(reader)
                    sizesSet = true
                }
                4 ->  {
                    rawType = nullableStringAdapter.fromJson(reader)
                    rawTypeSet = true
                }
                5 ->  {
                    uri = nullableStringAdapter.fromJson(reader)
                    uriSet = true
                }
                -1 -> {
                    // Unknown name, skip it.
                    reader.skipName()
                    reader.skipValue()
                }
            }
        }
        reader.endObject()
        var result = PictureCollection()
        result = result.copy(
                active = if (activeSet) active else result.active,
                link = if (linkSet) link else result.link,
                resourceKey = if (resourceKeySet) resourceKey else result.resourceKey,
                sizes = if (sizesSet) sizes else result.sizes,
                rawType = if (rawTypeSet) rawType else result.rawType,
                uri = if (uriSet) uri else result.uri)
        return result
    }

    override fun toJson(writer: JsonWriter, value: PictureCollection?) {
        if (value == null) {
            throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
        }
        writer.beginObject()
        writer.name("active")
        nullableBooleanAdapter.toJson(writer, value.active)
        writer.name("link")
        nullableStringAdapter.toJson(writer, value.link)
        writer.name("resource_key")
        nullableStringAdapter.toJson(writer, value.resourceKey)
        writer.name("sizes")
        nullableListOfPictureAdapter.toJson(writer, value.sizes)
        writer.name("type")
        nullableStringAdapter.toJson(writer, value.rawType)
        writer.name("uri")
        nullableStringAdapter.toJson(writer, value.uri)
        writer.endObject()
    }
}

// Code generated by moshi-kotlin-codegen. Do not edit.
package com.vimeo.networking2

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import java.lang.NullPointerException
import java.util.Date
import kotlin.Boolean
import kotlin.String

class TextTrackJsonAdapter(moshi: Moshi) : JsonAdapter<TextTrack>() {
    private val options: JsonReader.Options =
            JsonReader.Options.of("active", "hsl_link", "hlsLinkExpiresTime", "language", "link", "uri", "name", "type")

    private val nullableBooleanAdapter: JsonAdapter<Boolean?> =
            moshi.adapter<Boolean?>(Boolean::class.javaObjectType, kotlin.collections.emptySet(), "active")

    private val nullableStringAdapter: JsonAdapter<String?> =
            moshi.adapter<String?>(String::class.java, kotlin.collections.emptySet(), "hlsLink")

    private val nullableDateAdapter: JsonAdapter<Date?> =
            moshi.adapter<Date?>(Date::class.java, kotlin.collections.emptySet(), "hlsLinkExpiresTime")

    override fun toString(): String = "GeneratedJsonAdapter(TextTrack)"

    override fun fromJson(reader: JsonReader): TextTrack {
        var active: Boolean? = null
        var activeSet: Boolean = false
        var hlsLink: String? = null
        var hlsLinkSet: Boolean = false
        var hlsLinkExpiresTime: Date? = null
        var hlsLinkExpiresTimeSet: Boolean = false
        var language: String? = null
        var languageSet: Boolean = false
        var link: String? = null
        var linkSet: Boolean = false
        var uri: String? = null
        var uriSet: Boolean = false
        var name: String? = null
        var nameSet: Boolean = false
        var rawType: String? = null
        var rawTypeSet: Boolean = false
        reader.beginObject()
        while (reader.hasNext()) {
            when (reader.selectName(options)) {
                0 ->  {
                    active = nullableBooleanAdapter.fromJson(reader)
                    activeSet = true
                }
                1 ->  {
                    hlsLink = nullableStringAdapter.fromJson(reader)
                    hlsLinkSet = true
                }
                2 ->  {
                    hlsLinkExpiresTime = nullableDateAdapter.fromJson(reader)
                    hlsLinkExpiresTimeSet = true
                }
                3 ->  {
                    language = nullableStringAdapter.fromJson(reader)
                    languageSet = true
                }
                4 ->  {
                    link = nullableStringAdapter.fromJson(reader)
                    linkSet = true
                }
                5 ->  {
                    uri = nullableStringAdapter.fromJson(reader)
                    uriSet = true
                }
                6 ->  {
                    name = nullableStringAdapter.fromJson(reader)
                    nameSet = true
                }
                7 ->  {
                    rawType = nullableStringAdapter.fromJson(reader)
                    rawTypeSet = true
                }
                -1 -> {
                    // Unknown name, skip it.
                    reader.skipName()
                    reader.skipValue()
                }
            }
        }
        reader.endObject()
        var result = TextTrack()
        result = result.copy(
                active = if (activeSet) active else result.active,
                hlsLink = if (hlsLinkSet) hlsLink else result.hlsLink,
                hlsLinkExpiresTime = if (hlsLinkExpiresTimeSet) hlsLinkExpiresTime else result.hlsLinkExpiresTime,
                language = if (languageSet) language else result.language,
                link = if (linkSet) link else result.link,
                uri = if (uriSet) uri else result.uri,
                name = if (nameSet) name else result.name,
                rawType = if (rawTypeSet) rawType else result.rawType)
        return result
    }

    override fun toJson(writer: JsonWriter, value: TextTrack?) {
        if (value == null) {
            throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
        }
        writer.beginObject()
        writer.name("active")
        nullableBooleanAdapter.toJson(writer, value.active)
        writer.name("hsl_link")
        nullableStringAdapter.toJson(writer, value.hlsLink)
        writer.name("hlsLinkExpiresTime")
        nullableDateAdapter.toJson(writer, value.hlsLinkExpiresTime)
        writer.name("language")
        nullableStringAdapter.toJson(writer, value.language)
        writer.name("link")
        nullableStringAdapter.toJson(writer, value.link)
        writer.name("uri")
        nullableStringAdapter.toJson(writer, value.uri)
        writer.name("name")
        nullableStringAdapter.toJson(writer, value.name)
        writer.name("type")
        nullableStringAdapter.toJson(writer, value.rawType)
        writer.endObject()
    }
}

// Code generated by moshi-kotlin-codegen. Do not edit.
package com.vimeo.networking2

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import java.lang.NullPointerException
import java.util.Date
import kotlin.Boolean
import kotlin.String
import kotlin.collections.List

class BuyInteractionJsonAdapter(moshi: Moshi) : JsonAdapter<BuyInteraction>() {
    private val options: JsonReader.Options =
            JsonReader.Options.of("currency", "display_price", "download", "drm", "link", "price", "purchase_time", "stream", "options", "uri")

    private val nullableStringAdapter: JsonAdapter<String?> =
            moshi.adapter<String?>(String::class.java, kotlin.collections.emptySet(), "currency")

    private val nullableBooleanAdapter: JsonAdapter<Boolean?> =
            moshi.adapter<Boolean?>(Boolean::class.javaObjectType, kotlin.collections.emptySet(), "drm")

    private val nullableDateAdapter: JsonAdapter<Date?> =
            moshi.adapter<Date?>(Date::class.java, kotlin.collections.emptySet(), "purchaseTime")

    private val nullableListOfStringAdapter: JsonAdapter<List<String>?> =
            moshi.adapter<List<String>?>(Types.newParameterizedType(List::class.java, String::class.java), kotlin.collections.emptySet(), "options")

    override fun toString(): String = "GeneratedJsonAdapter(BuyInteraction)"

    override fun fromJson(reader: JsonReader): BuyInteraction {
        var currency: String? = null
        var currencySet: Boolean = false
        var displayPrice: String? = null
        var displayPriceSet: Boolean = false
        var download: String? = null
        var downloadSet: Boolean = false
        var drm: Boolean? = null
        var drmSet: Boolean = false
        var link: String? = null
        var linkSet: Boolean = false
        var price: String? = null
        var priceSet: Boolean = false
        var purchaseTime: Date? = null
        var purchaseTimeSet: Boolean = false
        var stream: String? = null
        var streamSet: Boolean = false
        var options_: List<String>? = null
        var optionsSet: Boolean = false
        var uri: String? = null
        var uriSet: Boolean = false
        reader.beginObject()
        while (reader.hasNext()) {
            when (reader.selectName(options)) {
                0 ->  {
                    currency = nullableStringAdapter.fromJson(reader)
                    currencySet = true
                }
                1 ->  {
                    displayPrice = nullableStringAdapter.fromJson(reader)
                    displayPriceSet = true
                }
                2 ->  {
                    download = nullableStringAdapter.fromJson(reader)
                    downloadSet = true
                }
                3 ->  {
                    drm = nullableBooleanAdapter.fromJson(reader)
                    drmSet = true
                }
                4 ->  {
                    link = nullableStringAdapter.fromJson(reader)
                    linkSet = true
                }
                5 ->  {
                    price = nullableStringAdapter.fromJson(reader)
                    priceSet = true
                }
                6 ->  {
                    purchaseTime = nullableDateAdapter.fromJson(reader)
                    purchaseTimeSet = true
                }
                7 ->  {
                    stream = nullableStringAdapter.fromJson(reader)
                    streamSet = true
                }
                8 ->  {
                    options_ = nullableListOfStringAdapter.fromJson(reader)
                    optionsSet = true
                }
                9 ->  {
                    uri = nullableStringAdapter.fromJson(reader)
                    uriSet = true
                }
                -1 -> {
                    // Unknown name, skip it.
                    reader.skipName()
                    reader.skipValue()
                }
            }
        }
        reader.endObject()
        var result = BuyInteraction()
        result = result.copy(
                currency = if (currencySet) currency else result.currency,
                displayPrice = if (displayPriceSet) displayPrice else result.displayPrice,
                download = if (downloadSet) download else result.download,
                drm = if (drmSet) drm else result.drm,
                link = if (linkSet) link else result.link,
                price = if (priceSet) price else result.price,
                purchaseTime = if (purchaseTimeSet) purchaseTime else result.purchaseTime,
                stream = if (streamSet) stream else result.stream,
                options = if (optionsSet) options_ else result.options,
                uri = if (uriSet) uri else result.uri)
        return result
    }

    override fun toJson(writer: JsonWriter, value: BuyInteraction?) {
        if (value == null) {
            throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
        }
        writer.beginObject()
        writer.name("currency")
        nullableStringAdapter.toJson(writer, value.currency)
        writer.name("display_price")
        nullableStringAdapter.toJson(writer, value.displayPrice)
        writer.name("download")
        nullableStringAdapter.toJson(writer, value.download)
        writer.name("drm")
        nullableBooleanAdapter.toJson(writer, value.drm)
        writer.name("link")
        nullableStringAdapter.toJson(writer, value.link)
        writer.name("price")
        nullableStringAdapter.toJson(writer, value.price)
        writer.name("purchase_time")
        nullableDateAdapter.toJson(writer, value.purchaseTime)
        writer.name("stream")
        nullableStringAdapter.toJson(writer, value.stream)
        writer.name("options")
        nullableListOfStringAdapter.toJson(writer, value.options)
        writer.name("uri")
        nullableStringAdapter.toJson(writer, value.uri)
        writer.endObject()
    }
}

// Code generated by moshi-kotlin-codegen. Do not edit.
package com.vimeo.networking2

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import java.lang.NullPointerException
import kotlin.Boolean
import kotlin.String

class PrivacyJsonAdapter(moshi: Moshi) : JsonAdapter<Privacy>() {
    private val options: JsonReader.Options =
            JsonReader.Options.of("add", "comments", "download", "embed", "view")

    private val nullableBooleanAdapter: JsonAdapter<Boolean?> =
            moshi.adapter<Boolean?>(Boolean::class.javaObjectType, kotlin.collections.emptySet(), "add")

    private val nullableStringAdapter: JsonAdapter<String?> =
            moshi.adapter<String?>(String::class.java, kotlin.collections.emptySet(), "commentPrivacy")

    override fun toString(): String = "GeneratedJsonAdapter(Privacy)"

    override fun fromJson(reader: JsonReader): Privacy {
        var add: Boolean? = null
        var addSet: Boolean = false
        var commentPrivacy: String? = null
        var commentPrivacySet: Boolean = false
        var download: Boolean? = null
        var downloadSet: Boolean = false
        var embedPrivacy: String? = null
        var embedPrivacySet: Boolean = false
        var viewPrivacy: String? = null
        var viewPrivacySet: Boolean = false
        reader.beginObject()
        while (reader.hasNext()) {
            when (reader.selectName(options)) {
                0 ->  {
                    add = nullableBooleanAdapter.fromJson(reader)
                    addSet = true
                }
                1 ->  {
                    commentPrivacy = nullableStringAdapter.fromJson(reader)
                    commentPrivacySet = true
                }
                2 ->  {
                    download = nullableBooleanAdapter.fromJson(reader)
                    downloadSet = true
                }
                3 ->  {
                    embedPrivacy = nullableStringAdapter.fromJson(reader)
                    embedPrivacySet = true
                }
                4 ->  {
                    viewPrivacy = nullableStringAdapter.fromJson(reader)
                    viewPrivacySet = true
                }
                -1 -> {
                    // Unknown name, skip it.
                    reader.skipName()
                    reader.skipValue()
                }
            }
        }
        reader.endObject()
        var result = Privacy()
        result = result.copy(
                add = if (addSet) add else result.add,
                commentPrivacy = if (commentPrivacySet) commentPrivacy else result.commentPrivacy,
                download = if (downloadSet) download else result.download,
                embedPrivacy = if (embedPrivacySet) embedPrivacy else result.embedPrivacy,
                viewPrivacy = if (viewPrivacySet) viewPrivacy else result.viewPrivacy)
        return result
    }

    override fun toJson(writer: JsonWriter, value: Privacy?) {
        if (value == null) {
            throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
        }
        writer.beginObject()
        writer.name("add")
        nullableBooleanAdapter.toJson(writer, value.add)
        writer.name("comments")
        nullableStringAdapter.toJson(writer, value.commentPrivacy)
        writer.name("download")
        nullableBooleanAdapter.toJson(writer, value.download)
        writer.name("embed")
        nullableStringAdapter.toJson(writer, value.embedPrivacy)
        writer.name("view")
        nullableStringAdapter.toJson(writer, value.viewPrivacy)
        writer.endObject()
    }
}

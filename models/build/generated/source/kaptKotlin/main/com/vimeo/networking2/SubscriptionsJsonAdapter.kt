// Code generated by moshi-kotlin-codegen. Do not edit.
package com.vimeo.networking2

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonDataException
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import java.lang.NullPointerException
import kotlin.Boolean
import kotlin.String

class SubscriptionsJsonAdapter(moshi: Moshi) : JsonAdapter<Subscriptions>() {
    private val options: JsonReader.Options =
            JsonReader.Options.of("comment", "credit", "like", "reply", "follow", "video_available", "followed_user_video_available")

    private val booleanAdapter: JsonAdapter<Boolean> =
            moshi.adapter<Boolean>(Boolean::class.java, kotlin.collections.emptySet(), "comment")

    override fun toString(): String = "GeneratedJsonAdapter(Subscriptions)"

    override fun fromJson(reader: JsonReader): Subscriptions {
        var comment: Boolean? = null
        var credit: Boolean? = null
        var like: Boolean? = null
        var reply: Boolean? = null
        var follow: Boolean? = null
        var videoAvailable: Boolean? = null
        var followedUserVideoAvailable: Boolean? = null
        reader.beginObject()
        while (reader.hasNext()) {
            when (reader.selectName(options)) {
                0 -> comment = booleanAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'comment' was null at ${reader.path}")
                1 -> credit = booleanAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'credit' was null at ${reader.path}")
                2 -> like = booleanAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'like' was null at ${reader.path}")
                3 -> reply = booleanAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'reply' was null at ${reader.path}")
                4 -> follow = booleanAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'follow' was null at ${reader.path}")
                5 -> videoAvailable = booleanAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'videoAvailable' was null at ${reader.path}")
                6 -> followedUserVideoAvailable = booleanAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'followedUserVideoAvailable' was null at ${reader.path}")
                -1 -> {
                    // Unknown name, skip it.
                    reader.skipName()
                    reader.skipValue()
                }
            }
        }
        reader.endObject()
        var result = Subscriptions()
        result = result.copy(
                comment = comment ?: result.comment,
                credit = credit ?: result.credit,
                like = like ?: result.like,
                reply = reply ?: result.reply,
                follow = follow ?: result.follow,
                videoAvailable = videoAvailable ?: result.videoAvailable,
                followedUserVideoAvailable = followedUserVideoAvailable ?: result.followedUserVideoAvailable)
        return result
    }

    override fun toJson(writer: JsonWriter, value: Subscriptions?) {
        if (value == null) {
            throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
        }
        writer.beginObject()
        writer.name("comment")
        booleanAdapter.toJson(writer, value.comment)
        writer.name("credit")
        booleanAdapter.toJson(writer, value.credit)
        writer.name("like")
        booleanAdapter.toJson(writer, value.like)
        writer.name("reply")
        booleanAdapter.toJson(writer, value.reply)
        writer.name("follow")
        booleanAdapter.toJson(writer, value.follow)
        writer.name("video_available")
        booleanAdapter.toJson(writer, value.videoAvailable)
        writer.name("followed_user_video_available")
        booleanAdapter.toJson(writer, value.followedUserVideoAvailable)
        writer.endObject()
    }
}

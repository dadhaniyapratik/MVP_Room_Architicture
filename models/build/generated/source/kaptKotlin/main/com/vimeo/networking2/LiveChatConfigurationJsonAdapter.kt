// Code generated by moshi-kotlin-codegen. Do not edit.
package com.vimeo.networking2

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import java.lang.NullPointerException
import kotlin.Boolean
import kotlin.String

class LiveChatConfigurationJsonAdapter(moshi: Moshi) : JsonAdapter<LiveChatConfiguration>() {
    private val options: JsonReader.Options =
            JsonReader.Options.of("api_key", "app_id", "auth_domain", "database_url", "messaging_sender_id", "project_id", "storage_bucket")

    private val nullableStringAdapter: JsonAdapter<String?> =
            moshi.adapter<String?>(String::class.java, kotlin.collections.emptySet(), "apiKey")

    override fun toString(): String = "GeneratedJsonAdapter(LiveChatConfiguration)"

    override fun fromJson(reader: JsonReader): LiveChatConfiguration {
        var apiKey: String? = null
        var apiKeySet: Boolean = false
        var appId: String? = null
        var appIdSet: Boolean = false
        var authDomain: String? = null
        var authDomainSet: Boolean = false
        var databaseUrl: String? = null
        var databaseUrlSet: Boolean = false
        var messagingSenderId: String? = null
        var messagingSenderIdSet: Boolean = false
        var projectId: String? = null
        var projectIdSet: Boolean = false
        var storageBucket: String? = null
        var storageBucketSet: Boolean = false
        reader.beginObject()
        while (reader.hasNext()) {
            when (reader.selectName(options)) {
                0 ->  {
                    apiKey = nullableStringAdapter.fromJson(reader)
                    apiKeySet = true
                }
                1 ->  {
                    appId = nullableStringAdapter.fromJson(reader)
                    appIdSet = true
                }
                2 ->  {
                    authDomain = nullableStringAdapter.fromJson(reader)
                    authDomainSet = true
                }
                3 ->  {
                    databaseUrl = nullableStringAdapter.fromJson(reader)
                    databaseUrlSet = true
                }
                4 ->  {
                    messagingSenderId = nullableStringAdapter.fromJson(reader)
                    messagingSenderIdSet = true
                }
                5 ->  {
                    projectId = nullableStringAdapter.fromJson(reader)
                    projectIdSet = true
                }
                6 ->  {
                    storageBucket = nullableStringAdapter.fromJson(reader)
                    storageBucketSet = true
                }
                -1 -> {
                    // Unknown name, skip it.
                    reader.skipName()
                    reader.skipValue()
                }
            }
        }
        reader.endObject()
        var result = LiveChatConfiguration()
        result = result.copy(
                apiKey = if (apiKeySet) apiKey else result.apiKey,
                appId = if (appIdSet) appId else result.appId,
                authDomain = if (authDomainSet) authDomain else result.authDomain,
                databaseUrl = if (databaseUrlSet) databaseUrl else result.databaseUrl,
                messagingSenderId = if (messagingSenderIdSet) messagingSenderId else result.messagingSenderId,
                projectId = if (projectIdSet) projectId else result.projectId,
                storageBucket = if (storageBucketSet) storageBucket else result.storageBucket)
        return result
    }

    override fun toJson(writer: JsonWriter, value: LiveChatConfiguration?) {
        if (value == null) {
            throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
        }
        writer.beginObject()
        writer.name("api_key")
        nullableStringAdapter.toJson(writer, value.apiKey)
        writer.name("app_id")
        nullableStringAdapter.toJson(writer, value.appId)
        writer.name("auth_domain")
        nullableStringAdapter.toJson(writer, value.authDomain)
        writer.name("database_url")
        nullableStringAdapter.toJson(writer, value.databaseUrl)
        writer.name("messaging_sender_id")
        nullableStringAdapter.toJson(writer, value.messagingSenderId)
        writer.name("project_id")
        nullableStringAdapter.toJson(writer, value.projectId)
        writer.name("storage_bucket")
        nullableStringAdapter.toJson(writer, value.storageBucket)
        writer.endObject()
    }
}

// Code generated by moshi-kotlin-codegen. Do not edit.
package com.vimeo.networking2

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import java.lang.NullPointerException
import kotlin.Boolean
import kotlin.String

class CreditJsonAdapter(moshi: Moshi) : JsonAdapter<Credit>() {
    private val options: JsonReader.Options =
            JsonReader.Options.of("name", "role", "uri", "user", "video")

    private val nullableStringAdapter: JsonAdapter<String?> =
            moshi.adapter<String?>(String::class.java, kotlin.collections.emptySet(), "name")

    private val nullableUserAdapter: JsonAdapter<User?> =
            moshi.adapter<User?>(User::class.java, kotlin.collections.emptySet(), "user")

    private val nullableVideoAdapter: JsonAdapter<Video?> =
            moshi.adapter<Video?>(Video::class.java, kotlin.collections.emptySet(), "video")

    override fun toString(): String = "GeneratedJsonAdapter(Credit)"

    override fun fromJson(reader: JsonReader): Credit {
        var name: String? = null
        var nameSet: Boolean = false
        var role: String? = null
        var roleSet: Boolean = false
        var uri: String? = null
        var uriSet: Boolean = false
        var user: User? = null
        var userSet: Boolean = false
        var video: Video? = null
        var videoSet: Boolean = false
        reader.beginObject()
        while (reader.hasNext()) {
            when (reader.selectName(options)) {
                0 ->  {
                    name = nullableStringAdapter.fromJson(reader)
                    nameSet = true
                }
                1 ->  {
                    role = nullableStringAdapter.fromJson(reader)
                    roleSet = true
                }
                2 ->  {
                    uri = nullableStringAdapter.fromJson(reader)
                    uriSet = true
                }
                3 ->  {
                    user = nullableUserAdapter.fromJson(reader)
                    userSet = true
                }
                4 ->  {
                    video = nullableVideoAdapter.fromJson(reader)
                    videoSet = true
                }
                -1 -> {
                    // Unknown name, skip it.
                    reader.skipName()
                    reader.skipValue()
                }
            }
        }
        reader.endObject()
        var result = Credit()
        result = result.copy(
                name = if (nameSet) name else result.name,
                role = if (roleSet) role else result.role,
                uri = if (uriSet) uri else result.uri,
                user = if (userSet) user else result.user,
                video = if (videoSet) video else result.video)
        return result
    }

    override fun toJson(writer: JsonWriter, value: Credit?) {
        if (value == null) {
            throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
        }
        writer.beginObject()
        writer.name("name")
        nullableStringAdapter.toJson(writer, value.name)
        writer.name("role")
        nullableStringAdapter.toJson(writer, value.role)
        writer.name("uri")
        nullableStringAdapter.toJson(writer, value.uri)
        writer.name("user")
        nullableUserAdapter.toJson(writer, value.user)
        writer.name("video")
        nullableVideoAdapter.toJson(writer, value.video)
        writer.endObject()
    }
}

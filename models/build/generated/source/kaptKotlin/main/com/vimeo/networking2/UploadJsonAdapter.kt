// Code generated by moshi-kotlin-codegen. Do not edit.
package com.vimeo.networking2

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import java.lang.NullPointerException
import kotlin.Boolean
import kotlin.Long
import kotlin.String

class UploadJsonAdapter(moshi: Moshi) : JsonAdapter<Upload>() {
    private val options: JsonReader.Options =
            JsonReader.Options.of("approach", "complete_uri", "form", "gcs", "link", "redirectUrl", "size", "status", "upload_link")

    private val nullableStringAdapter: JsonAdapter<String?> =
            moshi.adapter<String?>(String::class.java, kotlin.collections.emptySet(), "approach")

    private val nullableGcsAdapter: JsonAdapter<Gcs?> =
            moshi.adapter<Gcs?>(Gcs::class.java, kotlin.collections.emptySet(), "gcs")

    private val nullableLongAdapter: JsonAdapter<Long?> =
            moshi.adapter<Long?>(Long::class.javaObjectType, kotlin.collections.emptySet(), "size")

    override fun toString(): String = "GeneratedJsonAdapter(Upload)"

    override fun fromJson(reader: JsonReader): Upload {
        var approach: String? = null
        var approachSet: Boolean = false
        var completeUri: String? = null
        var completeUriSet: Boolean = false
        var form: String? = null
        var formSet: Boolean = false
        var gcs: Gcs? = null
        var gcsSet: Boolean = false
        var link: String? = null
        var linkSet: Boolean = false
        var redirectUrl: String? = null
        var redirectUrlSet: Boolean = false
        var size: Long? = null
        var sizeSet: Boolean = false
        var status: String? = null
        var statusSet: Boolean = false
        var uploadLink: String? = null
        var uploadLinkSet: Boolean = false
        reader.beginObject()
        while (reader.hasNext()) {
            when (reader.selectName(options)) {
                0 ->  {
                    approach = nullableStringAdapter.fromJson(reader)
                    approachSet = true
                }
                1 ->  {
                    completeUri = nullableStringAdapter.fromJson(reader)
                    completeUriSet = true
                }
                2 ->  {
                    form = nullableStringAdapter.fromJson(reader)
                    formSet = true
                }
                3 ->  {
                    gcs = nullableGcsAdapter.fromJson(reader)
                    gcsSet = true
                }
                4 ->  {
                    link = nullableStringAdapter.fromJson(reader)
                    linkSet = true
                }
                5 ->  {
                    redirectUrl = nullableStringAdapter.fromJson(reader)
                    redirectUrlSet = true
                }
                6 ->  {
                    size = nullableLongAdapter.fromJson(reader)
                    sizeSet = true
                }
                7 ->  {
                    status = nullableStringAdapter.fromJson(reader)
                    statusSet = true
                }
                8 ->  {
                    uploadLink = nullableStringAdapter.fromJson(reader)
                    uploadLinkSet = true
                }
                -1 -> {
                    // Unknown name, skip it.
                    reader.skipName()
                    reader.skipValue()
                }
            }
        }
        reader.endObject()
        var result = Upload()
        result = result.copy(
                approach = if (approachSet) approach else result.approach,
                completeUri = if (completeUriSet) completeUri else result.completeUri,
                form = if (formSet) form else result.form,
                gcs = if (gcsSet) gcs else result.gcs,
                link = if (linkSet) link else result.link,
                redirectUrl = if (redirectUrlSet) redirectUrl else result.redirectUrl,
                size = if (sizeSet) size else result.size,
                status = if (statusSet) status else result.status,
                uploadLink = if (uploadLinkSet) uploadLink else result.uploadLink)
        return result
    }

    override fun toJson(writer: JsonWriter, value: Upload?) {
        if (value == null) {
            throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
        }
        writer.beginObject()
        writer.name("approach")
        nullableStringAdapter.toJson(writer, value.approach)
        writer.name("complete_uri")
        nullableStringAdapter.toJson(writer, value.completeUri)
        writer.name("form")
        nullableStringAdapter.toJson(writer, value.form)
        writer.name("gcs")
        nullableGcsAdapter.toJson(writer, value.gcs)
        writer.name("link")
        nullableStringAdapter.toJson(writer, value.link)
        writer.name("redirectUrl")
        nullableStringAdapter.toJson(writer, value.redirectUrl)
        writer.name("size")
        nullableLongAdapter.toJson(writer, value.size)
        writer.name("status")
        nullableStringAdapter.toJson(writer, value.status)
        writer.name("upload_link")
        nullableStringAdapter.toJson(writer, value.uploadLink)
        writer.endObject()
    }
}

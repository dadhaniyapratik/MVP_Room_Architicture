// Code generated by moshi-kotlin-codegen. Do not edit.
package com.vimeo.networking2

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import java.lang.NullPointerException
import kotlin.Boolean
import kotlin.Int
import kotlin.String

class GcsJsonAdapter(moshi: Moshi) : JsonAdapter<Gcs>() {
    private val options: JsonReader.Options =
            JsonReader.Options.of("end_byte", "start_byte", "upload_link")

    private val nullableIntAdapter: JsonAdapter<Int?> =
            moshi.adapter<Int?>(Int::class.javaObjectType, kotlin.collections.emptySet(), "endByte")

    private val nullableStringAdapter: JsonAdapter<String?> =
            moshi.adapter<String?>(String::class.java, kotlin.collections.emptySet(), "uploadLink")

    override fun toString(): String = "GeneratedJsonAdapter(Gcs)"

    override fun fromJson(reader: JsonReader): Gcs {
        var endByte: Int? = null
        var endByteSet: Boolean = false
        var startByte: Int? = null
        var startByteSet: Boolean = false
        var uploadLink: String? = null
        var uploadLinkSet: Boolean = false
        reader.beginObject()
        while (reader.hasNext()) {
            when (reader.selectName(options)) {
                0 ->  {
                    endByte = nullableIntAdapter.fromJson(reader)
                    endByteSet = true
                }
                1 ->  {
                    startByte = nullableIntAdapter.fromJson(reader)
                    startByteSet = true
                }
                2 ->  {
                    uploadLink = nullableStringAdapter.fromJson(reader)
                    uploadLinkSet = true
                }
                -1 -> {
                    // Unknown name, skip it.
                    reader.skipName()
                    reader.skipValue()
                }
            }
        }
        reader.endObject()
        var result = Gcs()
        result = result.copy(
                endByte = if (endByteSet) endByte else result.endByte,
                startByte = if (startByteSet) startByte else result.startByte,
                uploadLink = if (uploadLinkSet) uploadLink else result.uploadLink)
        return result
    }

    override fun toJson(writer: JsonWriter, value: Gcs?) {
        if (value == null) {
            throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
        }
        writer.beginObject()
        writer.name("end_byte")
        nullableIntAdapter.toJson(writer, value.endByte)
        writer.name("start_byte")
        nullableIntAdapter.toJson(writer, value.startByte)
        writer.name("upload_link")
        nullableStringAdapter.toJson(writer, value.uploadLink)
        writer.endObject()
    }
}

// Code generated by moshi-kotlin-codegen. Do not edit.
package com.vimeo.networking2

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import java.lang.NullPointerException
import kotlin.Boolean
import kotlin.String

class FeaturesConfigurationJsonAdapter(moshi: Moshi) : JsonAdapter<FeaturesConfiguration>() {
    private val options: JsonReader.Options = JsonReader.Options.of("play_tracking")

    private val nullableBooleanAdapter: JsonAdapter<Boolean?> =
            moshi.adapter<Boolean?>(Boolean::class.javaObjectType, kotlin.collections.emptySet(), "playTracking")

    override fun toString(): String = "GeneratedJsonAdapter(FeaturesConfiguration)"

    override fun fromJson(reader: JsonReader): FeaturesConfiguration {
        var playTracking: Boolean? = null
        var playTrackingSet: Boolean = false
        reader.beginObject()
        while (reader.hasNext()) {
            when (reader.selectName(options)) {
                0 ->  {
                    playTracking = nullableBooleanAdapter.fromJson(reader)
                    playTrackingSet = true
                }
                -1 -> {
                    // Unknown name, skip it.
                    reader.skipName()
                    reader.skipValue()
                }
            }
        }
        reader.endObject()
        var result = FeaturesConfiguration()
        result = result.copy(
                playTracking = if (playTrackingSet) playTracking else result.playTracking)
        return result
    }

    override fun toJson(writer: JsonWriter, value: FeaturesConfiguration?) {
        if (value == null) {
            throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
        }
        writer.beginObject()
        writer.name("play_tracking")
        nullableBooleanAdapter.toJson(writer, value.playTracking)
        writer.endObject()
    }
}

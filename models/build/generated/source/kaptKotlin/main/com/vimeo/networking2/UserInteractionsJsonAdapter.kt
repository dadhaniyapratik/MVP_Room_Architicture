// Code generated by moshi-kotlin-codegen. Do not edit.
package com.vimeo.networking2

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import java.lang.NullPointerException
import kotlin.Boolean
import kotlin.String

class UserInteractionsJsonAdapter(moshi: Moshi) : JsonAdapter<UserInteractions>() {
    private val options: JsonReader.Options =
            JsonReader.Options.of("add_privacy_user", "block", "follow", "report")

    private val nullableBasicInteractionAdapter: JsonAdapter<BasicInteraction?> =
            moshi.adapter<BasicInteraction?>(BasicInteraction::class.java, kotlin.collections.emptySet(), "addPrivacyUser")

    private val nullableFollowInteractionAdapter: JsonAdapter<FollowInteraction?> =
            moshi.adapter<FollowInteraction?>(FollowInteraction::class.java, kotlin.collections.emptySet(), "follow")

    override fun toString(): String = "GeneratedJsonAdapter(UserInteractions)"

    override fun fromJson(reader: JsonReader): UserInteractions {
        var addPrivacyUser: BasicInteraction? = null
        var addPrivacyUserSet: Boolean = false
        var block: BasicInteraction? = null
        var blockSet: Boolean = false
        var follow: FollowInteraction? = null
        var followSet: Boolean = false
        var report: BasicInteraction? = null
        var reportSet: Boolean = false
        reader.beginObject()
        while (reader.hasNext()) {
            when (reader.selectName(options)) {
                0 ->  {
                    addPrivacyUser = nullableBasicInteractionAdapter.fromJson(reader)
                    addPrivacyUserSet = true
                }
                1 ->  {
                    block = nullableBasicInteractionAdapter.fromJson(reader)
                    blockSet = true
                }
                2 ->  {
                    follow = nullableFollowInteractionAdapter.fromJson(reader)
                    followSet = true
                }
                3 ->  {
                    report = nullableBasicInteractionAdapter.fromJson(reader)
                    reportSet = true
                }
                -1 -> {
                    // Unknown name, skip it.
                    reader.skipName()
                    reader.skipValue()
                }
            }
        }
        reader.endObject()
        var result = UserInteractions()
        result = result.copy(
                addPrivacyUser = if (addPrivacyUserSet) addPrivacyUser else result.addPrivacyUser,
                block = if (blockSet) block else result.block,
                follow = if (followSet) follow else result.follow,
                report = if (reportSet) report else result.report)
        return result
    }

    override fun toJson(writer: JsonWriter, value: UserInteractions?) {
        if (value == null) {
            throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
        }
        writer.beginObject()
        writer.name("add_privacy_user")
        nullableBasicInteractionAdapter.toJson(writer, value.addPrivacyUser)
        writer.name("block")
        nullableBasicInteractionAdapter.toJson(writer, value.block)
        writer.name("follow")
        nullableFollowInteractionAdapter.toJson(writer, value.follow)
        writer.name("report")
        nullableBasicInteractionAdapter.toJson(writer, value.report)
        writer.endObject()
    }
}

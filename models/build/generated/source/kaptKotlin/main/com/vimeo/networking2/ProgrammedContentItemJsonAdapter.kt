// Code generated by moshi-kotlin-codegen. Do not edit.
package com.vimeo.networking2

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import java.lang.NullPointerException
import kotlin.Boolean
import kotlin.String
import kotlin.collections.List

class ProgrammedContentItemJsonAdapter(moshi: Moshi) : JsonAdapter<ProgrammedContentItem>() {
    private val options: JsonReader.Options =
            JsonReader.Options.of("category", "channel", "content", "metadata", "name", "type", "uri")

    private val nullableCategoryAdapter: JsonAdapter<Category?> =
            moshi.adapter<Category?>(Category::class.java, kotlin.collections.emptySet(), "category")

    private val nullableChannelAdapter: JsonAdapter<Channel?> =
            moshi.adapter<Channel?>(Channel::class.java, kotlin.collections.emptySet(), "channel")

    private val nullableListOfVideoAdapter: JsonAdapter<List<Video>?> =
            moshi.adapter<List<Video>?>(Types.newParameterizedType(List::class.java, Video::class.java), kotlin.collections.emptySet(), "videoList")

    private val nullableMetadataConnectionsOfCinemaConnectionsAdapter: JsonAdapter<MetadataConnections<CinemaConnections>?> =
            moshi.adapter<MetadataConnections<CinemaConnections>?>(Types.newParameterizedType(MetadataConnections::class.java, CinemaConnections::class.java), kotlin.collections.emptySet(), "metadata")

    private val nullableStringAdapter: JsonAdapter<String?> =
            moshi.adapter<String?>(String::class.java, kotlin.collections.emptySet(), "name")

    override fun toString(): String = "GeneratedJsonAdapter(ProgrammedContentItem)"

    override fun fromJson(reader: JsonReader): ProgrammedContentItem {
        var category: Category? = null
        var categorySet: Boolean = false
        var channel: Channel? = null
        var channelSet: Boolean = false
        var videoList: List<Video>? = null
        var videoListSet: Boolean = false
        var metadata: MetadataConnections<CinemaConnections>? = null
        var metadataSet: Boolean = false
        var name: String? = null
        var nameSet: Boolean = false
        var rawType: String? = null
        var rawTypeSet: Boolean = false
        var uri: String? = null
        var uriSet: Boolean = false
        reader.beginObject()
        while (reader.hasNext()) {
            when (reader.selectName(options)) {
                0 ->  {
                    category = nullableCategoryAdapter.fromJson(reader)
                    categorySet = true
                }
                1 ->  {
                    channel = nullableChannelAdapter.fromJson(reader)
                    channelSet = true
                }
                2 ->  {
                    videoList = nullableListOfVideoAdapter.fromJson(reader)
                    videoListSet = true
                }
                3 ->  {
                    metadata = nullableMetadataConnectionsOfCinemaConnectionsAdapter.fromJson(reader)
                    metadataSet = true
                }
                4 ->  {
                    name = nullableStringAdapter.fromJson(reader)
                    nameSet = true
                }
                5 ->  {
                    rawType = nullableStringAdapter.fromJson(reader)
                    rawTypeSet = true
                }
                6 ->  {
                    uri = nullableStringAdapter.fromJson(reader)
                    uriSet = true
                }
                -1 -> {
                    // Unknown name, skip it.
                    reader.skipName()
                    reader.skipValue()
                }
            }
        }
        reader.endObject()
        var result = ProgrammedContentItem()
        result = result.copy(
                category = if (categorySet) category else result.category,
                channel = if (channelSet) channel else result.channel,
                videoList = if (videoListSet) videoList else result.videoList,
                metadata = if (metadataSet) metadata else result.metadata,
                name = if (nameSet) name else result.name,
                rawType = if (rawTypeSet) rawType else result.rawType,
                uri = if (uriSet) uri else result.uri)
        return result
    }

    override fun toJson(writer: JsonWriter, value: ProgrammedContentItem?) {
        if (value == null) {
            throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
        }
        writer.beginObject()
        writer.name("category")
        nullableCategoryAdapter.toJson(writer, value.category)
        writer.name("channel")
        nullableChannelAdapter.toJson(writer, value.channel)
        writer.name("content")
        nullableListOfVideoAdapter.toJson(writer, value.videoList)
        writer.name("metadata")
        nullableMetadataConnectionsOfCinemaConnectionsAdapter.toJson(writer, value.metadata)
        writer.name("name")
        nullableStringAdapter.toJson(writer, value.name)
        writer.name("type")
        nullableStringAdapter.toJson(writer, value.rawType)
        writer.name("uri")
        nullableStringAdapter.toJson(writer, value.uri)
        writer.endObject()
    }
}

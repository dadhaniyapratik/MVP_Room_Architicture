// Code generated by moshi-kotlin-codegen. Do not edit.
package com.vimeo.networking2

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import java.lang.NullPointerException
import kotlin.Boolean
import kotlin.Int
import kotlin.String

class PinCodeInfoJsonAdapter(moshi: Moshi) : JsonAdapter<PinCodeInfo>() {
    private val options: JsonReader.Options =
            JsonReader.Options.of("activate_link", "authorize_link", "device_code", "expires_in", "interval", "user_code")

    private val nullableStringAdapter: JsonAdapter<String?> =
            moshi.adapter<String?>(String::class.java, kotlin.collections.emptySet(), "activateLink")

    private val nullableIntAdapter: JsonAdapter<Int?> =
            moshi.adapter<Int?>(Int::class.javaObjectType, kotlin.collections.emptySet(), "expiresIn")

    override fun toString(): String = "GeneratedJsonAdapter(PinCodeInfo)"

    override fun fromJson(reader: JsonReader): PinCodeInfo {
        var activateLink: String? = null
        var activateLinkSet: Boolean = false
        var authorizeLink: String? = null
        var authorizeLinkSet: Boolean = false
        var deviceCode: String? = null
        var deviceCodeSet: Boolean = false
        var expiresIn: Int? = null
        var expiresInSet: Boolean = false
        var interval: Int? = null
        var intervalSet: Boolean = false
        var userCode: String? = null
        var userCodeSet: Boolean = false
        reader.beginObject()
        while (reader.hasNext()) {
            when (reader.selectName(options)) {
                0 ->  {
                    activateLink = nullableStringAdapter.fromJson(reader)
                    activateLinkSet = true
                }
                1 ->  {
                    authorizeLink = nullableStringAdapter.fromJson(reader)
                    authorizeLinkSet = true
                }
                2 ->  {
                    deviceCode = nullableStringAdapter.fromJson(reader)
                    deviceCodeSet = true
                }
                3 ->  {
                    expiresIn = nullableIntAdapter.fromJson(reader)
                    expiresInSet = true
                }
                4 ->  {
                    interval = nullableIntAdapter.fromJson(reader)
                    intervalSet = true
                }
                5 ->  {
                    userCode = nullableStringAdapter.fromJson(reader)
                    userCodeSet = true
                }
                -1 -> {
                    // Unknown name, skip it.
                    reader.skipName()
                    reader.skipValue()
                }
            }
        }
        reader.endObject()
        var result = PinCodeInfo()
        result = result.copy(
                activateLink = if (activateLinkSet) activateLink else result.activateLink,
                authorizeLink = if (authorizeLinkSet) authorizeLink else result.authorizeLink,
                deviceCode = if (deviceCodeSet) deviceCode else result.deviceCode,
                expiresIn = if (expiresInSet) expiresIn else result.expiresIn,
                interval = if (intervalSet) interval else result.interval,
                userCode = if (userCodeSet) userCode else result.userCode)
        return result
    }

    override fun toJson(writer: JsonWriter, value: PinCodeInfo?) {
        if (value == null) {
            throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
        }
        writer.beginObject()
        writer.name("activate_link")
        nullableStringAdapter.toJson(writer, value.activateLink)
        writer.name("authorize_link")
        nullableStringAdapter.toJson(writer, value.authorizeLink)
        writer.name("device_code")
        nullableStringAdapter.toJson(writer, value.deviceCode)
        writer.name("expires_in")
        nullableIntAdapter.toJson(writer, value.expiresIn)
        writer.name("interval")
        nullableIntAdapter.toJson(writer, value.interval)
        writer.name("user_code")
        nullableStringAdapter.toJson(writer, value.userCode)
        writer.endObject()
    }
}

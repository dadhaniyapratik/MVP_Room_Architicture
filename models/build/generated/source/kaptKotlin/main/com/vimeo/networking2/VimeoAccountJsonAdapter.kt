// Code generated by moshi-kotlin-codegen. Do not edit.
package com.vimeo.networking2

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import java.lang.NullPointerException
import java.util.Date
import kotlin.Boolean
import kotlin.String

class VimeoAccountJsonAdapter(moshi: Moshi) : JsonAdapter<VimeoAccount>() {
    private val options: JsonReader.Options =
            JsonReader.Options.of("access_token", "expires_on", "refresh_token", "scope", "user", "token_type")

    private val nullableStringAdapter: JsonAdapter<String?> =
            moshi.adapter<String?>(String::class.java, kotlin.collections.emptySet(), "accessToken")

    private val nullableDateAdapter: JsonAdapter<Date?> =
            moshi.adapter<Date?>(Date::class.java, kotlin.collections.emptySet(), "expiresOn")

    private val nullableUserAdapter: JsonAdapter<User?> =
            moshi.adapter<User?>(User::class.java, kotlin.collections.emptySet(), "user")

    override fun toString(): String = "GeneratedJsonAdapter(VimeoAccount)"

    override fun fromJson(reader: JsonReader): VimeoAccount {
        var accessToken: String? = null
        var accessTokenSet: Boolean = false
        var expiresOn: Date? = null
        var expiresOnSet: Boolean = false
        var refreshToken: String? = null
        var refreshTokenSet: Boolean = false
        var scope: String? = null
        var scopeSet: Boolean = false
        var user: User? = null
        var userSet: Boolean = false
        var tokenType: String? = null
        var tokenTypeSet: Boolean = false
        reader.beginObject()
        while (reader.hasNext()) {
            when (reader.selectName(options)) {
                0 ->  {
                    accessToken = nullableStringAdapter.fromJson(reader)
                    accessTokenSet = true
                }
                1 ->  {
                    expiresOn = nullableDateAdapter.fromJson(reader)
                    expiresOnSet = true
                }
                2 ->  {
                    refreshToken = nullableStringAdapter.fromJson(reader)
                    refreshTokenSet = true
                }
                3 ->  {
                    scope = nullableStringAdapter.fromJson(reader)
                    scopeSet = true
                }
                4 ->  {
                    user = nullableUserAdapter.fromJson(reader)
                    userSet = true
                }
                5 ->  {
                    tokenType = nullableStringAdapter.fromJson(reader)
                    tokenTypeSet = true
                }
                -1 -> {
                    // Unknown name, skip it.
                    reader.skipName()
                    reader.skipValue()
                }
            }
        }
        reader.endObject()
        var result = VimeoAccount()
        result = result.copy(
                accessToken = if (accessTokenSet) accessToken else result.accessToken,
                expiresOn = if (expiresOnSet) expiresOn else result.expiresOn,
                refreshToken = if (refreshTokenSet) refreshToken else result.refreshToken,
                scope = if (scopeSet) scope else result.scope,
                user = if (userSet) user else result.user,
                tokenType = if (tokenTypeSet) tokenType else result.tokenType)
        return result
    }

    override fun toJson(writer: JsonWriter, value: VimeoAccount?) {
        if (value == null) {
            throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
        }
        writer.beginObject()
        writer.name("access_token")
        nullableStringAdapter.toJson(writer, value.accessToken)
        writer.name("expires_on")
        nullableDateAdapter.toJson(writer, value.expiresOn)
        writer.name("refresh_token")
        nullableStringAdapter.toJson(writer, value.refreshToken)
        writer.name("scope")
        nullableStringAdapter.toJson(writer, value.scope)
        writer.name("user")
        nullableUserAdapter.toJson(writer, value.user)
        writer.name("token_type")
        nullableStringAdapter.toJson(writer, value.tokenType)
        writer.endObject()
    }
}

// Code generated by moshi-kotlin-codegen. Do not edit.
package com.vimeo.networking2

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import java.lang.NullPointerException
import java.util.Date
import kotlin.Boolean
import kotlin.String
import kotlin.collections.List

class UserJsonAdapter(moshi: Moshi) : JsonAdapter<User>() {
    private val options: JsonReader.Options =
            JsonReader.Options.of("bio", "content_filter", "created_time", "email", "emails", "link", "live_quota", "location", "metadata", "name", "pictures", "preferences", "resource_key", "upload_quota", "uri", "websites", "membership")

    private val nullableStringAdapter: JsonAdapter<String?> =
            moshi.adapter<String?>(String::class.java, kotlin.collections.emptySet(), "bio")

    private val nullableListOfStringAdapter: JsonAdapter<List<String>?> =
            moshi.adapter<List<String>?>(Types.newParameterizedType(List::class.java, String::class.java), kotlin.collections.emptySet(), "contentFilters")

    private val nullableDateAdapter: JsonAdapter<Date?> =
            moshi.adapter<Date?>(Date::class.java, kotlin.collections.emptySet(), "createdTime")

    private val nullableListOfEmailAdapter: JsonAdapter<List<Email>?> =
            moshi.adapter<List<Email>?>(Types.newParameterizedType(List::class.java, Email::class.java), kotlin.collections.emptySet(), "emails")

    private val nullableLiveQuotaAdapter: JsonAdapter<LiveQuota?> =
            moshi.adapter<LiveQuota?>(LiveQuota::class.java, kotlin.collections.emptySet(), "liveQuota")

    private val nullableMetadataOfUserConnectionsUserInteractionsAdapter: JsonAdapter<Metadata<UserConnections, UserInteractions>?> =
            moshi.adapter<Metadata<UserConnections, UserInteractions>?>(Types.newParameterizedType(Metadata::class.java, UserConnections::class.java, UserInteractions::class.java), kotlin.collections.emptySet(), "metadata")

    private val nullablePictureCollectionAdapter: JsonAdapter<PictureCollection?> =
            moshi.adapter<PictureCollection?>(PictureCollection::class.java, kotlin.collections.emptySet(), "pictures")

    private val nullablePreferencesAdapter: JsonAdapter<Preferences?> =
            moshi.adapter<Preferences?>(Preferences::class.java, kotlin.collections.emptySet(), "preferences")

    private val nullableUploadQuotaAdapter: JsonAdapter<UploadQuota?> =
            moshi.adapter<UploadQuota?>(UploadQuota::class.java, kotlin.collections.emptySet(), "uploadQuota")

    private val nullableListOfWebsiteAdapter: JsonAdapter<List<Website>?> =
            moshi.adapter<List<Website>?>(Types.newParameterizedType(List::class.java, Website::class.java), kotlin.collections.emptySet(), "websites")

    private val nullableMembershipAdapter: JsonAdapter<Membership?> =
            moshi.adapter<Membership?>(Membership::class.java, kotlin.collections.emptySet(), "membership")

    override fun toString(): String = "GeneratedJsonAdapter(User)"

    override fun fromJson(reader: JsonReader): User {
        var bio: String? = null
        var bioSet: Boolean = false
        var contentFilters: List<String>? = null
        var contentFiltersSet: Boolean = false
        var createdTime: Date? = null
        var createdTimeSet: Boolean = false
        var email: String? = null
        var emailSet: Boolean = false
        var emails: List<Email>? = null
        var emailsSet: Boolean = false
        var link: String? = null
        var linkSet: Boolean = false
        var liveQuota: LiveQuota? = null
        var liveQuotaSet: Boolean = false
        var location: String? = null
        var locationSet: Boolean = false
        var metadata: Metadata<UserConnections, UserInteractions>? = null
        var metadataSet: Boolean = false
        var name: String? = null
        var nameSet: Boolean = false
        var pictures: PictureCollection? = null
        var picturesSet: Boolean = false
        var preferences: Preferences? = null
        var preferencesSet: Boolean = false
        var resourceKey: String? = null
        var resourceKeySet: Boolean = false
        var uploadQuota: UploadQuota? = null
        var uploadQuotaSet: Boolean = false
        var uri: String? = null
        var uriSet: Boolean = false
        var websites: List<Website>? = null
        var websitesSet: Boolean = false
        var membership: Membership? = null
        var membershipSet: Boolean = false
        reader.beginObject()
        while (reader.hasNext()) {
            when (reader.selectName(options)) {
                0 ->  {
                    bio = nullableStringAdapter.fromJson(reader)
                    bioSet = true
                }
                1 ->  {
                    contentFilters = nullableListOfStringAdapter.fromJson(reader)
                    contentFiltersSet = true
                }
                2 ->  {
                    createdTime = nullableDateAdapter.fromJson(reader)
                    createdTimeSet = true
                }
                3 ->  {
                    email = nullableStringAdapter.fromJson(reader)
                    emailSet = true
                }
                4 ->  {
                    emails = nullableListOfEmailAdapter.fromJson(reader)
                    emailsSet = true
                }
                5 ->  {
                    link = nullableStringAdapter.fromJson(reader)
                    linkSet = true
                }
                6 ->  {
                    liveQuota = nullableLiveQuotaAdapter.fromJson(reader)
                    liveQuotaSet = true
                }
                7 ->  {
                    location = nullableStringAdapter.fromJson(reader)
                    locationSet = true
                }
                8 ->  {
                    metadata = nullableMetadataOfUserConnectionsUserInteractionsAdapter.fromJson(reader)
                    metadataSet = true
                }
                9 ->  {
                    name = nullableStringAdapter.fromJson(reader)
                    nameSet = true
                }
                10 ->  {
                    pictures = nullablePictureCollectionAdapter.fromJson(reader)
                    picturesSet = true
                }
                11 ->  {
                    preferences = nullablePreferencesAdapter.fromJson(reader)
                    preferencesSet = true
                }
                12 ->  {
                    resourceKey = nullableStringAdapter.fromJson(reader)
                    resourceKeySet = true
                }
                13 ->  {
                    uploadQuota = nullableUploadQuotaAdapter.fromJson(reader)
                    uploadQuotaSet = true
                }
                14 ->  {
                    uri = nullableStringAdapter.fromJson(reader)
                    uriSet = true
                }
                15 ->  {
                    websites = nullableListOfWebsiteAdapter.fromJson(reader)
                    websitesSet = true
                }
                16 ->  {
                    membership = nullableMembershipAdapter.fromJson(reader)
                    membershipSet = true
                }
                -1 -> {
                    // Unknown name, skip it.
                    reader.skipName()
                    reader.skipValue()
                }
            }
        }
        reader.endObject()
        var result = User()
        result = result.copy(
                bio = if (bioSet) bio else result.bio,
                contentFilters = if (contentFiltersSet) contentFilters else result.contentFilters,
                createdTime = if (createdTimeSet) createdTime else result.createdTime,
                email = if (emailSet) email else result.email,
                emails = if (emailsSet) emails else result.emails,
                link = if (linkSet) link else result.link,
                liveQuota = if (liveQuotaSet) liveQuota else result.liveQuota,
                location = if (locationSet) location else result.location,
                metadata = if (metadataSet) metadata else result.metadata,
                name = if (nameSet) name else result.name,
                pictures = if (picturesSet) pictures else result.pictures,
                preferences = if (preferencesSet) preferences else result.preferences,
                resourceKey = if (resourceKeySet) resourceKey else result.resourceKey,
                uploadQuota = if (uploadQuotaSet) uploadQuota else result.uploadQuota,
                uri = if (uriSet) uri else result.uri,
                websites = if (websitesSet) websites else result.websites,
                membership = if (membershipSet) membership else result.membership)
        return result
    }

    override fun toJson(writer: JsonWriter, value: User?) {
        if (value == null) {
            throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
        }
        writer.beginObject()
        writer.name("bio")
        nullableStringAdapter.toJson(writer, value.bio)
        writer.name("content_filter")
        nullableListOfStringAdapter.toJson(writer, value.contentFilters)
        writer.name("created_time")
        nullableDateAdapter.toJson(writer, value.createdTime)
        writer.name("email")
        nullableStringAdapter.toJson(writer, value.email)
        writer.name("emails")
        nullableListOfEmailAdapter.toJson(writer, value.emails)
        writer.name("link")
        nullableStringAdapter.toJson(writer, value.link)
        writer.name("live_quota")
        nullableLiveQuotaAdapter.toJson(writer, value.liveQuota)
        writer.name("location")
        nullableStringAdapter.toJson(writer, value.location)
        writer.name("metadata")
        nullableMetadataOfUserConnectionsUserInteractionsAdapter.toJson(writer, value.metadata)
        writer.name("name")
        nullableStringAdapter.toJson(writer, value.name)
        writer.name("pictures")
        nullablePictureCollectionAdapter.toJson(writer, value.pictures)
        writer.name("preferences")
        nullablePreferencesAdapter.toJson(writer, value.preferences)
        writer.name("resource_key")
        nullableStringAdapter.toJson(writer, value.resourceKey)
        writer.name("upload_quota")
        nullableUploadQuotaAdapter.toJson(writer, value.uploadQuota)
        writer.name("uri")
        nullableStringAdapter.toJson(writer, value.uri)
        writer.name("websites")
        nullableListOfWebsiteAdapter.toJson(writer, value.websites)
        writer.name("membership")
        nullableMembershipAdapter.toJson(writer, value.membership)
        writer.endObject()
    }
}

// Code generated by moshi-kotlin-codegen. Do not edit.
package com.vimeo.networking2

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import java.lang.NullPointerException
import java.util.Date
import kotlin.Boolean
import kotlin.Double
import kotlin.Long
import kotlin.String

class RentInteractionJsonAdapter(moshi: Moshi) : JsonAdapter<RentInteraction>() {
    private val options: JsonReader.Options =
            JsonReader.Options.of("currency", "display_price", "drm", "expires_time", "link", "price", "purchase_time", "stream", "uri")

    private val nullableStringAdapter: JsonAdapter<String?> =
            moshi.adapter<String?>(String::class.java, kotlin.collections.emptySet(), "currency")

    private val nullableLongAdapter: JsonAdapter<Long?> =
            moshi.adapter<Long?>(Long::class.javaObjectType, kotlin.collections.emptySet(), "displayPrice")

    private val nullableBooleanAdapter: JsonAdapter<Boolean?> =
            moshi.adapter<Boolean?>(Boolean::class.javaObjectType, kotlin.collections.emptySet(), "drm")

    private val nullableDateAdapter: JsonAdapter<Date?> =
            moshi.adapter<Date?>(Date::class.java, kotlin.collections.emptySet(), "expirationDate")

    private val nullableDoubleAdapter: JsonAdapter<Double?> =
            moshi.adapter<Double?>(Double::class.javaObjectType, kotlin.collections.emptySet(), "price")

    override fun toString(): String = "GeneratedJsonAdapter(RentInteraction)"

    override fun fromJson(reader: JsonReader): RentInteraction {
        var currency: String? = null
        var currencySet: Boolean = false
        var displayPrice: Long? = null
        var displayPriceSet: Boolean = false
        var drm: Boolean? = null
        var drmSet: Boolean = false
        var expirationDate: Date? = null
        var expirationDateSet: Boolean = false
        var link: String? = null
        var linkSet: Boolean = false
        var price: Double? = null
        var priceSet: Boolean = false
        var purchaseTime: Date? = null
        var purchaseTimeSet: Boolean = false
        var streamAccess: String? = null
        var streamAccessSet: Boolean = false
        var uri: String? = null
        var uriSet: Boolean = false
        reader.beginObject()
        while (reader.hasNext()) {
            when (reader.selectName(options)) {
                0 ->  {
                    currency = nullableStringAdapter.fromJson(reader)
                    currencySet = true
                }
                1 ->  {
                    displayPrice = nullableLongAdapter.fromJson(reader)
                    displayPriceSet = true
                }
                2 ->  {
                    drm = nullableBooleanAdapter.fromJson(reader)
                    drmSet = true
                }
                3 ->  {
                    expirationDate = nullableDateAdapter.fromJson(reader)
                    expirationDateSet = true
                }
                4 ->  {
                    link = nullableStringAdapter.fromJson(reader)
                    linkSet = true
                }
                5 ->  {
                    price = nullableDoubleAdapter.fromJson(reader)
                    priceSet = true
                }
                6 ->  {
                    purchaseTime = nullableDateAdapter.fromJson(reader)
                    purchaseTimeSet = true
                }
                7 ->  {
                    streamAccess = nullableStringAdapter.fromJson(reader)
                    streamAccessSet = true
                }
                8 ->  {
                    uri = nullableStringAdapter.fromJson(reader)
                    uriSet = true
                }
                -1 -> {
                    // Unknown name, skip it.
                    reader.skipName()
                    reader.skipValue()
                }
            }
        }
        reader.endObject()
        var result = RentInteraction()
        result = result.copy(
                currency = if (currencySet) currency else result.currency,
                displayPrice = if (displayPriceSet) displayPrice else result.displayPrice,
                drm = if (drmSet) drm else result.drm,
                expirationDate = if (expirationDateSet) expirationDate else result.expirationDate,
                link = if (linkSet) link else result.link,
                price = if (priceSet) price else result.price,
                purchaseTime = if (purchaseTimeSet) purchaseTime else result.purchaseTime,
                streamAccess = if (streamAccessSet) streamAccess else result.streamAccess,
                uri = if (uriSet) uri else result.uri)
        return result
    }

    override fun toJson(writer: JsonWriter, value: RentInteraction?) {
        if (value == null) {
            throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
        }
        writer.beginObject()
        writer.name("currency")
        nullableStringAdapter.toJson(writer, value.currency)
        writer.name("display_price")
        nullableLongAdapter.toJson(writer, value.displayPrice)
        writer.name("drm")
        nullableBooleanAdapter.toJson(writer, value.drm)
        writer.name("expires_time")
        nullableDateAdapter.toJson(writer, value.expirationDate)
        writer.name("link")
        nullableStringAdapter.toJson(writer, value.link)
        writer.name("price")
        nullableDoubleAdapter.toJson(writer, value.price)
        writer.name("purchase_time")
        nullableDateAdapter.toJson(writer, value.purchaseTime)
        writer.name("stream")
        nullableStringAdapter.toJson(writer, value.streamAccess)
        writer.name("uri")
        nullableStringAdapter.toJson(writer, value.uri)
        writer.endObject()
    }
}

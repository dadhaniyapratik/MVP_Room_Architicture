// Code generated by moshi-kotlin-codegen. Do not edit.
package com.vimeo.networking2

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import java.lang.NullPointerException
import java.util.Date
import kotlin.Boolean
import kotlin.Int
import kotlin.String

class VideoSourceFileJsonAdapter(moshi: Moshi) : JsonAdapter<VideoSourceFile>() {
    private val options: JsonReader.Options =
            JsonReader.Options.of("created_time", "expires", "fps", "height", "link", "log", "md5", "quality", "size", "source_link", "type", "width")

    private val nullableDateAdapter: JsonAdapter<Date?> =
            moshi.adapter<Date?>(Date::class.java, kotlin.collections.emptySet(), "createdTime")

    private val nullableIntAdapter: JsonAdapter<Int?> =
            moshi.adapter<Int?>(Int::class.javaObjectType, kotlin.collections.emptySet(), "fps")

    private val nullableStringAdapter: JsonAdapter<String?> =
            moshi.adapter<String?>(String::class.java, kotlin.collections.emptySet(), "link")

    private val nullableVideoLogAdapter: JsonAdapter<VideoLog?> =
            moshi.adapter<VideoLog?>(VideoLog::class.java, kotlin.collections.emptySet(), "log")

    override fun toString(): String = "GeneratedJsonAdapter(VideoSourceFile)"

    override fun fromJson(reader: JsonReader): VideoSourceFile {
        var createdTime: Date? = null
        var createdTimeSet: Boolean = false
        var expires: Date? = null
        var expiresSet: Boolean = false
        var fps: Int? = null
        var fpsSet: Boolean = false
        var height: Int? = null
        var heightSet: Boolean = false
        var link: String? = null
        var linkSet: Boolean = false
        var log: VideoLog? = null
        var logSet: Boolean = false
        var md5: String? = null
        var md5Set: Boolean = false
        var videoQuality: String? = null
        var videoQualitySet: Boolean = false
        var size: Int? = null
        var sizeSet: Boolean = false
        var sourceLink: String? = null
        var sourceLinkSet: Boolean = false
        var rawType: String? = null
        var rawTypeSet: Boolean = false
        var width: Int? = null
        var widthSet: Boolean = false
        reader.beginObject()
        while (reader.hasNext()) {
            when (reader.selectName(options)) {
                0 ->  {
                    createdTime = nullableDateAdapter.fromJson(reader)
                    createdTimeSet = true
                }
                1 ->  {
                    expires = nullableDateAdapter.fromJson(reader)
                    expiresSet = true
                }
                2 ->  {
                    fps = nullableIntAdapter.fromJson(reader)
                    fpsSet = true
                }
                3 ->  {
                    height = nullableIntAdapter.fromJson(reader)
                    heightSet = true
                }
                4 ->  {
                    link = nullableStringAdapter.fromJson(reader)
                    linkSet = true
                }
                5 ->  {
                    log = nullableVideoLogAdapter.fromJson(reader)
                    logSet = true
                }
                6 ->  {
                    md5 = nullableStringAdapter.fromJson(reader)
                    md5Set = true
                }
                7 ->  {
                    videoQuality = nullableStringAdapter.fromJson(reader)
                    videoQualitySet = true
                }
                8 ->  {
                    size = nullableIntAdapter.fromJson(reader)
                    sizeSet = true
                }
                9 ->  {
                    sourceLink = nullableStringAdapter.fromJson(reader)
                    sourceLinkSet = true
                }
                10 ->  {
                    rawType = nullableStringAdapter.fromJson(reader)
                    rawTypeSet = true
                }
                11 ->  {
                    width = nullableIntAdapter.fromJson(reader)
                    widthSet = true
                }
                -1 -> {
                    // Unknown name, skip it.
                    reader.skipName()
                    reader.skipValue()
                }
            }
        }
        reader.endObject()
        var result = VideoSourceFile()
        result = result.copy(
                createdTime = if (createdTimeSet) createdTime else result.createdTime,
                expires = if (expiresSet) expires else result.expires,
                fps = if (fpsSet) fps else result.fps,
                height = if (heightSet) height else result.height,
                link = if (linkSet) link else result.link,
                log = if (logSet) log else result.log,
                md5 = if (md5Set) md5 else result.md5,
                videoQuality = if (videoQualitySet) videoQuality else result.videoQuality,
                size = if (sizeSet) size else result.size,
                sourceLink = if (sourceLinkSet) sourceLink else result.sourceLink,
                rawType = if (rawTypeSet) rawType else result.rawType,
                width = if (widthSet) width else result.width)
        return result
    }

    override fun toJson(writer: JsonWriter, value: VideoSourceFile?) {
        if (value == null) {
            throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
        }
        writer.beginObject()
        writer.name("created_time")
        nullableDateAdapter.toJson(writer, value.createdTime)
        writer.name("expires")
        nullableDateAdapter.toJson(writer, value.expires)
        writer.name("fps")
        nullableIntAdapter.toJson(writer, value.fps)
        writer.name("height")
        nullableIntAdapter.toJson(writer, value.height)
        writer.name("link")
        nullableStringAdapter.toJson(writer, value.link)
        writer.name("log")
        nullableVideoLogAdapter.toJson(writer, value.log)
        writer.name("md5")
        nullableStringAdapter.toJson(writer, value.md5)
        writer.name("quality")
        nullableStringAdapter.toJson(writer, value.videoQuality)
        writer.name("size")
        nullableIntAdapter.toJson(writer, value.size)
        writer.name("source_link")
        nullableStringAdapter.toJson(writer, value.sourceLink)
        writer.name("type")
        nullableStringAdapter.toJson(writer, value.rawType)
        writer.name("width")
        nullableIntAdapter.toJson(writer, value.width)
        writer.endObject()
    }
}

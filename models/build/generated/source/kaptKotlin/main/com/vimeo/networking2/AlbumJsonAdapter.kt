// Code generated by moshi-kotlin-codegen. Do not edit.
package com.vimeo.networking2

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import java.lang.NullPointerException
import java.util.Date
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.collections.List

class AlbumJsonAdapter(moshi: Moshi) : JsonAdapter<Album>() {
    private val options: JsonReader.Options =
            JsonReader.Options.of("brand_color", "created_time", "custom_logo", "description", "duration", "embed", "hide_nav", "layout", "link", "metadata", "modified_time", "name", "pictures", "privacy", "resource_key", "review_mode", "sort", "theme", "uri", "user")

    private val nullableStringAdapter: JsonAdapter<String?> =
            moshi.adapter<String?>(String::class.java, kotlin.collections.emptySet(), "brandColor")

    private val nullableDateAdapter: JsonAdapter<Date?> =
            moshi.adapter<Date?>(Date::class.java, kotlin.collections.emptySet(), "createdTime")

    private val nullablePictureCollectionAdapter: JsonAdapter<PictureCollection?> =
            moshi.adapter<PictureCollection?>(PictureCollection::class.java, kotlin.collections.emptySet(), "customLogo")

    private val nullableIntAdapter: JsonAdapter<Int?> =
            moshi.adapter<Int?>(Int::class.javaObjectType, kotlin.collections.emptySet(), "duration")

    private val nullableAlbumEmbedAdapter: JsonAdapter<AlbumEmbed?> =
            moshi.adapter<AlbumEmbed?>(AlbumEmbed::class.java, kotlin.collections.emptySet(), "embed")

    private val nullableBooleanAdapter: JsonAdapter<Boolean?> =
            moshi.adapter<Boolean?>(Boolean::class.javaObjectType, kotlin.collections.emptySet(), "hideNav")

    private val nullableMetadataOfAlbumConnectionsAlbumInteractionsAdapter: JsonAdapter<Metadata<AlbumConnections, AlbumInteractions>?> =
            moshi.adapter<Metadata<AlbumConnections, AlbumInteractions>?>(Types.newParameterizedType(Metadata::class.java, AlbumConnections::class.java, AlbumInteractions::class.java), kotlin.collections.emptySet(), "metadata")

    private val nullableListOfPictureCollectionAdapter: JsonAdapter<List<PictureCollection>?> =
            moshi.adapter<List<PictureCollection>?>(Types.newParameterizedType(List::class.java, PictureCollection::class.java), kotlin.collections.emptySet(), "pictures")

    private val nullableAlbumPrivacyAdapter: JsonAdapter<AlbumPrivacy?> =
            moshi.adapter<AlbumPrivacy?>(AlbumPrivacy::class.java, kotlin.collections.emptySet(), "privacy")

    private val nullableUserAdapter: JsonAdapter<User?> =
            moshi.adapter<User?>(User::class.java, kotlin.collections.emptySet(), "user")

    override fun toString(): String = "GeneratedJsonAdapter(Album)"

    override fun fromJson(reader: JsonReader): Album {
        var brandColor: String? = null
        var brandColorSet: Boolean = false
        var createdTime: Date? = null
        var createdTimeSet: Boolean = false
        var customLogo: PictureCollection? = null
        var customLogoSet: Boolean = false
        var description: String? = null
        var descriptionSet: Boolean = false
        var duration: Int? = null
        var durationSet: Boolean = false
        var embed: AlbumEmbed? = null
        var embedSet: Boolean = false
        var hideNav: Boolean? = null
        var hideNavSet: Boolean = false
        var layout: String? = null
        var layoutSet: Boolean = false
        var link: String? = null
        var linkSet: Boolean = false
        var metadata: Metadata<AlbumConnections, AlbumInteractions>? = null
        var metadataSet: Boolean = false
        var modifiedTime: Date? = null
        var modifiedTimeSet: Boolean = false
        var name: String? = null
        var nameSet: Boolean = false
        var pictures: List<PictureCollection>? = null
        var picturesSet: Boolean = false
        var privacy: AlbumPrivacy? = null
        var privacySet: Boolean = false
        var resourceKey: String? = null
        var resourceKeySet: Boolean = false
        var reviewMode: Boolean? = null
        var reviewModeSet: Boolean = false
        var sort: String? = null
        var sortSet: Boolean = false
        var theme: String? = null
        var themeSet: Boolean = false
        var uri: String? = null
        var uriSet: Boolean = false
        var user: User? = null
        var userSet: Boolean = false
        reader.beginObject()
        while (reader.hasNext()) {
            when (reader.selectName(options)) {
                0 ->  {
                    brandColor = nullableStringAdapter.fromJson(reader)
                    brandColorSet = true
                }
                1 ->  {
                    createdTime = nullableDateAdapter.fromJson(reader)
                    createdTimeSet = true
                }
                2 ->  {
                    customLogo = nullablePictureCollectionAdapter.fromJson(reader)
                    customLogoSet = true
                }
                3 ->  {
                    description = nullableStringAdapter.fromJson(reader)
                    descriptionSet = true
                }
                4 ->  {
                    duration = nullableIntAdapter.fromJson(reader)
                    durationSet = true
                }
                5 ->  {
                    embed = nullableAlbumEmbedAdapter.fromJson(reader)
                    embedSet = true
                }
                6 ->  {
                    hideNav = nullableBooleanAdapter.fromJson(reader)
                    hideNavSet = true
                }
                7 ->  {
                    layout = nullableStringAdapter.fromJson(reader)
                    layoutSet = true
                }
                8 ->  {
                    link = nullableStringAdapter.fromJson(reader)
                    linkSet = true
                }
                9 ->  {
                    metadata = nullableMetadataOfAlbumConnectionsAlbumInteractionsAdapter.fromJson(reader)
                    metadataSet = true
                }
                10 ->  {
                    modifiedTime = nullableDateAdapter.fromJson(reader)
                    modifiedTimeSet = true
                }
                11 ->  {
                    name = nullableStringAdapter.fromJson(reader)
                    nameSet = true
                }
                12 ->  {
                    pictures = nullableListOfPictureCollectionAdapter.fromJson(reader)
                    picturesSet = true
                }
                13 ->  {
                    privacy = nullableAlbumPrivacyAdapter.fromJson(reader)
                    privacySet = true
                }
                14 ->  {
                    resourceKey = nullableStringAdapter.fromJson(reader)
                    resourceKeySet = true
                }
                15 ->  {
                    reviewMode = nullableBooleanAdapter.fromJson(reader)
                    reviewModeSet = true
                }
                16 ->  {
                    sort = nullableStringAdapter.fromJson(reader)
                    sortSet = true
                }
                17 ->  {
                    theme = nullableStringAdapter.fromJson(reader)
                    themeSet = true
                }
                18 ->  {
                    uri = nullableStringAdapter.fromJson(reader)
                    uriSet = true
                }
                19 ->  {
                    user = nullableUserAdapter.fromJson(reader)
                    userSet = true
                }
                -1 -> {
                    // Unknown name, skip it.
                    reader.skipName()
                    reader.skipValue()
                }
            }
        }
        reader.endObject()
        var result = Album()
        result = result.copy(
                brandColor = if (brandColorSet) brandColor else result.brandColor,
                createdTime = if (createdTimeSet) createdTime else result.createdTime,
                customLogo = if (customLogoSet) customLogo else result.customLogo,
                description = if (descriptionSet) description else result.description,
                duration = if (durationSet) duration else result.duration,
                embed = if (embedSet) embed else result.embed,
                hideNav = if (hideNavSet) hideNav else result.hideNav,
                layout = if (layoutSet) layout else result.layout,
                link = if (linkSet) link else result.link,
                metadata = if (metadataSet) metadata else result.metadata,
                modifiedTime = if (modifiedTimeSet) modifiedTime else result.modifiedTime,
                name = if (nameSet) name else result.name,
                pictures = if (picturesSet) pictures else result.pictures,
                privacy = if (privacySet) privacy else result.privacy,
                resourceKey = if (resourceKeySet) resourceKey else result.resourceKey,
                reviewMode = if (reviewModeSet) reviewMode else result.reviewMode,
                sort = if (sortSet) sort else result.sort,
                theme = if (themeSet) theme else result.theme,
                uri = if (uriSet) uri else result.uri,
                user = if (userSet) user else result.user)
        return result
    }

    override fun toJson(writer: JsonWriter, value: Album?) {
        if (value == null) {
            throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
        }
        writer.beginObject()
        writer.name("brand_color")
        nullableStringAdapter.toJson(writer, value.brandColor)
        writer.name("created_time")
        nullableDateAdapter.toJson(writer, value.createdTime)
        writer.name("custom_logo")
        nullablePictureCollectionAdapter.toJson(writer, value.customLogo)
        writer.name("description")
        nullableStringAdapter.toJson(writer, value.description)
        writer.name("duration")
        nullableIntAdapter.toJson(writer, value.duration)
        writer.name("embed")
        nullableAlbumEmbedAdapter.toJson(writer, value.embed)
        writer.name("hide_nav")
        nullableBooleanAdapter.toJson(writer, value.hideNav)
        writer.name("layout")
        nullableStringAdapter.toJson(writer, value.layout)
        writer.name("link")
        nullableStringAdapter.toJson(writer, value.link)
        writer.name("metadata")
        nullableMetadataOfAlbumConnectionsAlbumInteractionsAdapter.toJson(writer, value.metadata)
        writer.name("modified_time")
        nullableDateAdapter.toJson(writer, value.modifiedTime)
        writer.name("name")
        nullableStringAdapter.toJson(writer, value.name)
        writer.name("pictures")
        nullableListOfPictureCollectionAdapter.toJson(writer, value.pictures)
        writer.name("privacy")
        nullableAlbumPrivacyAdapter.toJson(writer, value.privacy)
        writer.name("resource_key")
        nullableStringAdapter.toJson(writer, value.resourceKey)
        writer.name("review_mode")
        nullableBooleanAdapter.toJson(writer, value.reviewMode)
        writer.name("sort")
        nullableStringAdapter.toJson(writer, value.sort)
        writer.name("theme")
        nullableStringAdapter.toJson(writer, value.theme)
        writer.name("uri")
        nullableStringAdapter.toJson(writer, value.uri)
        writer.name("user")
        nullableUserAdapter.toJson(writer, value.user)
        writer.endObject()
    }
}

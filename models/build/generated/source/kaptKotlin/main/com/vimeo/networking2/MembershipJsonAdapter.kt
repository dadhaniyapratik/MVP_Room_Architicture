// Code generated by moshi-kotlin-codegen. Do not edit.
package com.vimeo.networking2

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import java.lang.NullPointerException
import kotlin.Boolean
import kotlin.String

class MembershipJsonAdapter(moshi: Moshi) : JsonAdapter<Membership>() {
    private val options: JsonReader.Options =
            JsonReader.Options.of("display", "type", "badge", "subscription")

    private val nullableStringAdapter: JsonAdapter<String?> =
            moshi.adapter<String?>(String::class.java, kotlin.collections.emptySet(), "display")

    private val nullableUserBadgeAdapter: JsonAdapter<UserBadge?> =
            moshi.adapter<UserBadge?>(UserBadge::class.java, kotlin.collections.emptySet(), "badge")

    private val nullableSubscriptionAdapter: JsonAdapter<Subscription?> =
            moshi.adapter<Subscription?>(Subscription::class.java, kotlin.collections.emptySet(), "subscription")

    override fun toString(): String = "GeneratedJsonAdapter(Membership)"

    override fun fromJson(reader: JsonReader): Membership {
        var display: String? = null
        var displaySet: Boolean = false
        var rawType: String? = null
        var rawTypeSet: Boolean = false
        var badge: UserBadge? = null
        var badgeSet: Boolean = false
        var subscription: Subscription? = null
        var subscriptionSet: Boolean = false
        reader.beginObject()
        while (reader.hasNext()) {
            when (reader.selectName(options)) {
                0 ->  {
                    display = nullableStringAdapter.fromJson(reader)
                    displaySet = true
                }
                1 ->  {
                    rawType = nullableStringAdapter.fromJson(reader)
                    rawTypeSet = true
                }
                2 ->  {
                    badge = nullableUserBadgeAdapter.fromJson(reader)
                    badgeSet = true
                }
                3 ->  {
                    subscription = nullableSubscriptionAdapter.fromJson(reader)
                    subscriptionSet = true
                }
                -1 -> {
                    // Unknown name, skip it.
                    reader.skipName()
                    reader.skipValue()
                }
            }
        }
        reader.endObject()
        var result = Membership()
        result = result.copy(
                display = if (displaySet) display else result.display,
                rawType = if (rawTypeSet) rawType else result.rawType,
                badge = if (badgeSet) badge else result.badge,
                subscription = if (subscriptionSet) subscription else result.subscription)
        return result
    }

    override fun toJson(writer: JsonWriter, value: Membership?) {
        if (value == null) {
            throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
        }
        writer.beginObject()
        writer.name("display")
        nullableStringAdapter.toJson(writer, value.display)
        writer.name("type")
        nullableStringAdapter.toJson(writer, value.rawType)
        writer.name("badge")
        nullableUserBadgeAdapter.toJson(writer, value.badge)
        writer.name("subscription")
        nullableSubscriptionAdapter.toJson(writer, value.subscription)
        writer.endObject()
    }
}

// Code generated by moshi-kotlin-codegen. Do not edit.
package com.vimeo.networking2

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import java.lang.NullPointerException
import kotlin.Boolean
import kotlin.String

class ProductJsonAdapter(moshi: Moshi) : JsonAdapter<Product>() {
    private val options: JsonReader.Options =
            JsonReader.Options.of("billing_period", "description", "metadata", "name", "product_id", "uri")

    private val nullableStringAdapter: JsonAdapter<String?> =
            moshi.adapter<String?>(String::class.java, kotlin.collections.emptySet(), "billingPeriod")

    private val nullableMetadataInteractionsOfProductInteractionsAdapter: JsonAdapter<MetadataInteractions<ProductInteractions>?> =
            moshi.adapter<MetadataInteractions<ProductInteractions>?>(Types.newParameterizedType(MetadataInteractions::class.java, ProductInteractions::class.java), kotlin.collections.emptySet(), "metadata")

    override fun toString(): String = "GeneratedJsonAdapter(Product)"

    override fun fromJson(reader: JsonReader): Product {
        var billingPeriod: String? = null
        var billingPeriodSet: Boolean = false
        var description: String? = null
        var descriptionSet: Boolean = false
        var metadata: MetadataInteractions<ProductInteractions>? = null
        var metadataSet: Boolean = false
        var name: String? = null
        var nameSet: Boolean = false
        var productId: String? = null
        var productIdSet: Boolean = false
        var uri: String? = null
        var uriSet: Boolean = false
        reader.beginObject()
        while (reader.hasNext()) {
            when (reader.selectName(options)) {
                0 ->  {
                    billingPeriod = nullableStringAdapter.fromJson(reader)
                    billingPeriodSet = true
                }
                1 ->  {
                    description = nullableStringAdapter.fromJson(reader)
                    descriptionSet = true
                }
                2 ->  {
                    metadata = nullableMetadataInteractionsOfProductInteractionsAdapter.fromJson(reader)
                    metadataSet = true
                }
                3 ->  {
                    name = nullableStringAdapter.fromJson(reader)
                    nameSet = true
                }
                4 ->  {
                    productId = nullableStringAdapter.fromJson(reader)
                    productIdSet = true
                }
                5 ->  {
                    uri = nullableStringAdapter.fromJson(reader)
                    uriSet = true
                }
                -1 -> {
                    // Unknown name, skip it.
                    reader.skipName()
                    reader.skipValue()
                }
            }
        }
        reader.endObject()
        var result = Product()
        result = result.copy(
                billingPeriod = if (billingPeriodSet) billingPeriod else result.billingPeriod,
                description = if (descriptionSet) description else result.description,
                metadata = if (metadataSet) metadata else result.metadata,
                name = if (nameSet) name else result.name,
                productId = if (productIdSet) productId else result.productId,
                uri = if (uriSet) uri else result.uri)
        return result
    }

    override fun toJson(writer: JsonWriter, value: Product?) {
        if (value == null) {
            throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
        }
        writer.beginObject()
        writer.name("billing_period")
        nullableStringAdapter.toJson(writer, value.billingPeriod)
        writer.name("description")
        nullableStringAdapter.toJson(writer, value.description)
        writer.name("metadata")
        nullableMetadataInteractionsOfProductInteractionsAdapter.toJson(writer, value.metadata)
        writer.name("name")
        nullableStringAdapter.toJson(writer, value.name)
        writer.name("product_id")
        nullableStringAdapter.toJson(writer, value.productId)
        writer.name("uri")
        nullableStringAdapter.toJson(writer, value.uri)
        writer.endObject()
    }
}

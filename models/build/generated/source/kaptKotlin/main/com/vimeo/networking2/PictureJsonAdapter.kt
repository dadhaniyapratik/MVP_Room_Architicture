// Code generated by moshi-kotlin-codegen. Do not edit.
package com.vimeo.networking2

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import java.lang.NullPointerException
import kotlin.Boolean
import kotlin.Int
import kotlin.String

class PictureJsonAdapter(moshi: Moshi) : JsonAdapter<Picture>() {
    private val options: JsonReader.Options =
            JsonReader.Options.of("height", "link", "link_with_play_button", "resourceKey", "width")

    private val nullableIntAdapter: JsonAdapter<Int?> =
            moshi.adapter<Int?>(Int::class.javaObjectType, kotlin.collections.emptySet(), "height")

    private val nullableStringAdapter: JsonAdapter<String?> =
            moshi.adapter<String?>(String::class.java, kotlin.collections.emptySet(), "link")

    override fun toString(): String = "GeneratedJsonAdapter(Picture)"

    override fun fromJson(reader: JsonReader): Picture {
        var height: Int? = null
        var heightSet: Boolean = false
        var link: String? = null
        var linkSet: Boolean = false
        var linkWithPlayButton: String? = null
        var linkWithPlayButtonSet: Boolean = false
        var resourceKey: String? = null
        var resourceKeySet: Boolean = false
        var width: Int? = null
        var widthSet: Boolean = false
        reader.beginObject()
        while (reader.hasNext()) {
            when (reader.selectName(options)) {
                0 ->  {
                    height = nullableIntAdapter.fromJson(reader)
                    heightSet = true
                }
                1 ->  {
                    link = nullableStringAdapter.fromJson(reader)
                    linkSet = true
                }
                2 ->  {
                    linkWithPlayButton = nullableStringAdapter.fromJson(reader)
                    linkWithPlayButtonSet = true
                }
                3 ->  {
                    resourceKey = nullableStringAdapter.fromJson(reader)
                    resourceKeySet = true
                }
                4 ->  {
                    width = nullableIntAdapter.fromJson(reader)
                    widthSet = true
                }
                -1 -> {
                    // Unknown name, skip it.
                    reader.skipName()
                    reader.skipValue()
                }
            }
        }
        reader.endObject()
        var result = Picture()
        result = result.copy(
                height = if (heightSet) height else result.height,
                link = if (linkSet) link else result.link,
                linkWithPlayButton = if (linkWithPlayButtonSet) linkWithPlayButton else result.linkWithPlayButton,
                resourceKey = if (resourceKeySet) resourceKey else result.resourceKey,
                width = if (widthSet) width else result.width)
        return result
    }

    override fun toJson(writer: JsonWriter, value: Picture?) {
        if (value == null) {
            throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
        }
        writer.beginObject()
        writer.name("height")
        nullableIntAdapter.toJson(writer, value.height)
        writer.name("link")
        nullableStringAdapter.toJson(writer, value.link)
        writer.name("link_with_play_button")
        nullableStringAdapter.toJson(writer, value.linkWithPlayButton)
        writer.name("resourceKey")
        nullableStringAdapter.toJson(writer, value.resourceKey)
        writer.name("width")
        nullableIntAdapter.toJson(writer, value.width)
        writer.endObject()
    }
}

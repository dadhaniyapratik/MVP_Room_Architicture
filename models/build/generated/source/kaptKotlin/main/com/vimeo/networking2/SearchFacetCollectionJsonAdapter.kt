// Code generated by moshi-kotlin-codegen. Do not edit.
package com.vimeo.networking2

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import java.lang.NullPointerException
import kotlin.Boolean
import kotlin.String

class SearchFacetCollectionJsonAdapter(moshi: Moshi) : JsonAdapter<SearchFacetCollection>() {
    private val options: JsonReader.Options =
            JsonReader.Options.of("category", "duration", "license", "type", "uploaded", "user_type")

    private val nullableSearchFacetAdapter: JsonAdapter<SearchFacet?> =
            moshi.adapter<SearchFacet?>(SearchFacet::class.java, kotlin.collections.emptySet(), "categoryFacet")

    override fun toString(): String = "GeneratedJsonAdapter(SearchFacetCollection)"

    override fun fromJson(reader: JsonReader): SearchFacetCollection {
        var categoryFacet: SearchFacet? = null
        var categoryFacetSet: Boolean = false
        var durationFacet: SearchFacet? = null
        var durationFacetSet: Boolean = false
        var licenseFacet: SearchFacet? = null
        var licenseFacetSet: Boolean = false
        var typeFacet: SearchFacet? = null
        var typeFacetSet: Boolean = false
        var uploadedFacet: SearchFacet? = null
        var uploadedFacetSet: Boolean = false
        var userTypeFacet: SearchFacet? = null
        var userTypeFacetSet: Boolean = false
        reader.beginObject()
        while (reader.hasNext()) {
            when (reader.selectName(options)) {
                0 ->  {
                    categoryFacet = nullableSearchFacetAdapter.fromJson(reader)
                    categoryFacetSet = true
                }
                1 ->  {
                    durationFacet = nullableSearchFacetAdapter.fromJson(reader)
                    durationFacetSet = true
                }
                2 ->  {
                    licenseFacet = nullableSearchFacetAdapter.fromJson(reader)
                    licenseFacetSet = true
                }
                3 ->  {
                    typeFacet = nullableSearchFacetAdapter.fromJson(reader)
                    typeFacetSet = true
                }
                4 ->  {
                    uploadedFacet = nullableSearchFacetAdapter.fromJson(reader)
                    uploadedFacetSet = true
                }
                5 ->  {
                    userTypeFacet = nullableSearchFacetAdapter.fromJson(reader)
                    userTypeFacetSet = true
                }
                -1 -> {
                    // Unknown name, skip it.
                    reader.skipName()
                    reader.skipValue()
                }
            }
        }
        reader.endObject()
        var result = SearchFacetCollection()
        result = result.copy(
                categoryFacet = if (categoryFacetSet) categoryFacet else result.categoryFacet,
                durationFacet = if (durationFacetSet) durationFacet else result.durationFacet,
                licenseFacet = if (licenseFacetSet) licenseFacet else result.licenseFacet,
                typeFacet = if (typeFacetSet) typeFacet else result.typeFacet,
                uploadedFacet = if (uploadedFacetSet) uploadedFacet else result.uploadedFacet,
                userTypeFacet = if (userTypeFacetSet) userTypeFacet else result.userTypeFacet)
        return result
    }

    override fun toJson(writer: JsonWriter, value: SearchFacetCollection?) {
        if (value == null) {
            throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
        }
        writer.beginObject()
        writer.name("category")
        nullableSearchFacetAdapter.toJson(writer, value.categoryFacet)
        writer.name("duration")
        nullableSearchFacetAdapter.toJson(writer, value.durationFacet)
        writer.name("license")
        nullableSearchFacetAdapter.toJson(writer, value.licenseFacet)
        writer.name("type")
        nullableSearchFacetAdapter.toJson(writer, value.typeFacet)
        writer.name("uploaded")
        nullableSearchFacetAdapter.toJson(writer, value.uploadedFacet)
        writer.name("user_type")
        nullableSearchFacetAdapter.toJson(writer, value.userTypeFacet)
        writer.endObject()
    }
}
